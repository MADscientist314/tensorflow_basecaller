{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import csv\n",
    "import h5py\n",
    "import signal\n",
    "import fast5\n",
    "import fastq\n",
    "import re\n",
    "import matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def BaseFunction(x): #this function divides the length of whatever size the list is by 4 for a 4mer\n",
    "  return(len(x)//4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def SigFunction(x): #this function divides the length of whatever size the list is by 4 for a 4mer\n",
    "  return(len(x)//40)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def array_inspect(x): # this function provides information about the array\n",
    "    print (\"Shape is\",(x.shape))\n",
    "    print((\"Length is\",len(x)))\n",
    "    print((\"Dimension is\",x.ndim))\n",
    "    print((\"Total Size is\",x.size))\n",
    "    print((\"Type is\",x.dtype))\n",
    "    print((\"Type Name is\",x.dtype.name))\n",
    "    #print((\"Mean is\",(x).mean))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def normalize(x,y):\n",
    "    # normalize resistance by dividing by the mean(or std?)\n",
    "    z=np.divide(x,y)\n",
    "    #np.savetxt(\"NormalizedSigArray_{}.csv\".format(),(z), delimiter=\",\")\n",
    "    return z"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape is (55928,)\n",
      "('Length is', 55928)\n",
      "('Dimension is', 1)\n",
      "('Total Size is', 55928)\n",
      "('Type is', dtype('float64'))\n",
      "('Type Name is', 'float64')\n",
      "Shape is (54603,)\n",
      "('Length is', 54603)\n",
      "('Dimension is', 1)\n",
      "('Total Size is', 54603)\n",
      "('Type is', dtype('float64'))\n",
      "('Type Name is', 'float64')\n",
      "Shape is (10170,)\n",
      "('Length is', 10170)\n",
      "('Dimension is', 1)\n",
      "('Total Size is', 10170)\n",
      "('Type is', dtype('float64'))\n",
      "('Type Name is', 'float64')\n",
      "Shape is (31658,)\n",
      "('Length is', 31658)\n",
      "('Dimension is', 1)\n",
      "('Total Size is', 31658)\n",
      "('Type is', dtype('float64'))\n",
      "('Type Name is', 'float64')\n",
      "Shape is (2827,)\n",
      "('Length is', 2827)\n",
      "('Dimension is', 1)\n",
      "('Total Size is', 2827)\n",
      "('Type is', dtype('float64'))\n",
      "('Type Name is', 'float64')\n",
      "Shape is (53456,)\n",
      "('Length is', 53456)\n",
      "('Dimension is', 1)\n",
      "('Total Size is', 53456)\n",
      "('Type is', dtype('float64'))\n",
      "('Type Name is', 'float64')\n",
      "Shape is (11781,)\n",
      "('Length is', 11781)\n",
      "('Dimension is', 1)\n",
      "('Total Size is', 11781)\n",
      "('Type is', dtype('float64'))\n",
      "('Type Name is', 'float64')\n",
      "Shape is (25008,)\n",
      "('Length is', 25008)\n",
      "('Dimension is', 1)\n",
      "('Total Size is', 25008)\n",
      "('Type is', dtype('float64'))\n",
      "('Type Name is', 'float64')\n",
      "Shape is (9430,)\n",
      "('Length is', 9430)\n",
      "('Dimension is', 1)\n",
      "('Total Size is', 9430)\n",
      "('Type is', dtype('float64'))\n",
      "('Type Name is', 'float64')\n",
      "Shape is (56072,)\n",
      "('Length is', 56072)\n",
      "('Dimension is', 1)\n",
      "('Total Size is', 56072)\n",
      "('Type is', dtype('float64'))\n",
      "('Type Name is', 'float64')\n"
     ]
    }
   ],
   "source": [
    "# Import the signal level data\n",
    "# Normalize it to the mean fof the signal\n",
    "# Reshape it into a 2D array with a column length of 40 (10 signals per base)\n",
    "means = [] \n",
    "std = []\n",
    "sig = []\n",
    "for x in range(10):\n",
    "    a=np.loadtxt(\"signal/signal_{}.txt\".format(x)) # load the signal\n",
    "    m=a.mean() #obtain the average signal from the read\n",
    "    b=normalize(m,a) # divide each resistance by the average to normalize \n",
    "    sig.append(b)\n",
    "    array_inspect(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(signal_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = []\n",
    "for x,y in enumerate(sig):\n",
    "    b=[np.array(sig[x]).size]\n",
    "       #, sig[x].ndim, sig[x].dtype)# gets the  number of resistances from each signal\n",
    "    a.append(b)\n",
    "print(a)\n",
    "        \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#subsample=[]\n",
    "#c = np.zeros((10,1))\n",
    "#print(c)\n",
    "#d = np.full((10,1),2)\n",
    "#print(d)\n",
    "#stride\n",
    "#for x in \n",
    "#if d.any()>c.any(): # I'm trying to divid the resistances in half every time and its not working...\n",
    "    #np.divide(b,d)\n",
    "#    b=c\n",
    "#    print(c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# This cell imports the bases, converts them to a list, and converts them to a code of 0123 instead of ATCG\n",
    "f = open(\"fasta/sampled_read.fasta\",\"r\") \n",
    "a = f.read()\n",
    "b = (a.split(\">\", 11))\n",
    "base = [re.sub(\">|\\n|\\d\", \"\",str) for str in b]\n",
    "baseA = [re.sub(\"A\",\"0\",str) for str in base]\n",
    "baseT = [re.sub(\"T\",\"1\",str) for str in baseA]\n",
    "baseG = [re.sub(\"G\",\"2\",str) for str in baseT]\n",
    "base_coded = [re.sub(\"C\",\"3\",str) for str in baseG]\n",
    "#print(base_coded)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "reads=[]\n",
    "for x in range(1):#len(base_coded)):\n",
    "    l=list(int (i) for i in base_coded[x])\n",
    "    d=np.asarray(l)\n",
    "    print(d)\n",
    "    d.resize(2078,4)\n",
    "    print(d)\n",
    "    reads.append(l)\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "reads=[]\n",
    "for x in range(0):#len(base_coded)):\n",
    "    l=list(int (i) for i in base_coded[x])\n",
    "    d=np.asarray(l)\n",
    "    d.resize(BaseFunction(l),4)\n",
    "    BaseFunction(l)\n",
    "    reads.append(d)\n",
    "#reads=np.array(2078,4,1)\n",
    "array_inspect(d)\n",
    "print(d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#np.concatenate((sig,base_array), axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "base_transpose = np.transpose(base_array) # you cant transpose a 1d arry into a 1d array but I was trying to append it to have the resistances>\n",
    "base_transpose.T\n",
    "base_transpose.shape\n",
    "#for x in range(10):\n",
    "    #print(\"base_array\"(a))\n",
    " #   print(len(base_array[x]))\n",
    "    #print(\"base_transpose length is:\")\n",
    "  #  print(len(base_transpose[x]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#for x,y in enumerate(base):\n",
    "    #print(np.array(data[x]).shape)\n",
    "#    print(np.array(data[x]).size, data[x].ndim, data[x].dtype)# gets the  number of resistances from each signal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for x in range(10):\n",
    "    print (x)\n",
    "    a= \"signal_\"(x)\".txt\"\n",
    "    print(a)\n",
    "    #np.loadtxt(\"signal/signal_(x).txt\") #load the signal level data into the module"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
